exit
guest.admin?
guest
exit
pp page.body
c
admin.admin?
pp page.body
c
another_note.visible_to
another_note.readers
another_note
exit
one_user
one_user.notes.build
exit
test_note
test_note.save!
test_note
c
test_user.notes
c
test_user.readable
test_user.notes
c
exit
pp page.body
c
exit
pp page.body
exit
pp page.body
note.user
one_user
note
c
exit
pp page.body
c
exit
pp page.body
exit
user.persisted?
!!user.id
user.id
!!user
user
exit
test_user.save!
test_user.save
test_user
exit
another_user.name
one_user.name
one_user
exit
one_user.name
another_user.name
c
one_user.name
q
user.name
q
current_user.name
other_user.name
c
note
n
note_params
q
c
current_user
c
current_user
@user
n
@user
c
exit
current_user.user?
current_user.privileges?
NotePolicy.new(current_user, @note).index?
authorize @note
@note=Note.first
current_user
Note.all.flatten
Note.all
authorize @notes
c
exit
NotePolicy.new(current_user, Note.all).index?
current_user.role
current_user
c
@current_user
current_user
current_user.role
@user
@user.role
c
pp page.body
c
pp page.body
exit
vipnote2
vip
build_notes
build_nots
User.all
Note.all
exit
User.all
Note.all
exit
vipnote2.readers.include?(other_user)
vipnote2.readers.include?(vip)
vipnote2.readers.count
vipnote2.visible_to
vipnote2.readers
vipnote2.user.name
vipnote2.user
other_user.email
other_user.name
exit
other_user.email
other_user.name
other_user
exit
other_user
exit
other_user
exit
other_user
exit
other_user
exit
other_user.name
exit
other_user.email
other_user.name
vipnote2.visible_to
exit
other_user.name
vipnote2.visible_to
vipnote2.visible_to.include?(other_user.email || other_user.name)
vipnote2.visible_to.include?(other_user)
vipnote2.visible_to
u.visible_to
exit
vipnote2.visible_to
exit
c
record.visible_to
user
c
user
c
record
record.visible_to
user
exit
user
User.all
User.find_by(name:"current")
exit
user
c
record.visible_to
record
user
c
user
c
user.id
user_id
record.user_id
c
record.user
User.all.count
c
record
exit
record.user
record.owner
exit
user.id
c
record
c
exit
user.persisted?
user
c
!!user
user
exit
vipnote2.exists?
vipnote2
other_user
c
user.role
c
user.role
c
user
c
user.vip?
user.admin?
c
q
user
admin.admin?
admin
c
n
c
current_user.admin?
params[:id]
current_user
c
admin_only
current_user.admin?
current_user == @user
@user=User.find(params[:id])
params[:id]
current_user
curent_user
q
current_user
@user
c
exit
@current_user.admin?
@current_user.adming?
q
session[:user_id]
admin_signed_in?
user_signed_in?
user_sgined_in?
user_sgined_in
admin_signed_in?
current_admin_user?
current_admin_user
c
q
authenticate!
current_user
c
q
signed_in_as_admin?
signed_in?
logged_in?
session[:user_id]
admin
admin?
params
